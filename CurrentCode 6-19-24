<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>L-EAF Assistant</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input, textarea {
            width: 25%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        textarea {
            height: 100px;
            font-size: 16px; 
        }
        button {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #218838;
        }
        #output {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f9f9f9;
            max-height: 500px;
            overflow-y: scroll;
            width: 75%;
        }
        .message {
            margin-bottom: 20px;
        }
        .user-message, .assistant-message {
            padding: 10px;
            border-radius: 4px;
        }
        .user-message {
            background-color: #e7f4ff;
            border: 1px solid #a1c5e6;
        }
        .assistant-message {
            background-color: #fff3e7;
            border: 1px solid #e6c5a1;
        }
        hr {
            border: 0;
            height: 1px;
            background: #ccc;
            margin: 20px 0;
        }
        .section-title {
            font-weight: bold;
            margin-top: 10px;
        }
        .spinner {
            display: none;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #28a745;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <h1>L-EAF Assistant</h1>
    <div class="form-group">
        <label for="subject">Subject</label>
        <input type="text" id="subject" name="subject">
    </div>
    <div class="form-group">
        <label for="grade">Grade Level</label>
        <input type="text" id="grade" name="grade">
    </div>
    <div class="form-group">
        <label for="topics">Topics to Cover</label>
        <textarea id="topics" name="topics"></textarea>
    </div>
    <button onclick="startConversation()">Submit</button>

    <div id="output"></div>

    <!-- Loading spinner -->
    <div class="spinner" id="spinner"></div>
    <!-- Website code ends here -->


    <!-- API call code starts here -->
    <script>
        let conversationHistory = [];

        async function fetchFileContent(fileId, apiKey) {
            const response = await fetch(`https://api.openai.com/v1/files/${fileId}/content`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${apiKey}`
                }
            });

            if (!response.ok) {
                throw new Error(`File ${fileId} is not accessible. Status: ${response.status}`);
            }

            const content = await response.text();
            return content;
        }

        async function callAssistant(userMessage) {
            try {
                // Show spinner
                document.getElementById('spinner').style.display = 'block';

                const apiKey = 'sk-proj-g1tySZaBHzswY5UaMQDRT3BlbkFJ4oLpOLhzQKPejezkve2B'; // API key
                const combinedFileId = 'file-1NFmsYN5aiOdCvCFKJZpJjV6'; // file ID for info docs

                const fileContent = await fetchFileContent(combinedFileId, apiKey);

                conversationHistory.push({ role: 'user', content: userMessage });

                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-3.5-turbo',
                        messages: [
                            { role: 'system', content: `Instructions:
Purpose: The LearningFLOW AI Companion is a dynamic tool designed to assist educators in seamlessly translate learning standards, course descriptions and syllabi into the innovative LearningFLOW lesson plan format. 
Key Deliverables: The AI Companion will generate five essential deliverable packages, each tailored to enhance the learning experience by incorporating Agile principles:
1 . Sample Learning Objective Card with the following components:

Wide Open Questions: Stimulate critical thinking and creativity.

Learning Outcomes: Clearly defined goals for student achievement.

Value of Learning Outcomes: Explanation of the practical and educational significance of each outcome.

Learning Activities: Engaging tasks and exercises aligned with outcomes.

Facilitating Questions: Guided queries to foster deeper understanding.

Milestone Due Dates: Timelines for achieving key learning milestones.

Resources: Curated educational materials and tools to support learning.

Purpose: This card serves as a roadmap for each lesson, outlining the objectives and resources in a structured, easy-to-follow format.

Student Team Guide:



2. Practical tips and strategies to help student teams adopt and practice Agile methodologies.

Purpose: To empower students with the skills and knowledge to work effectively in team settings.

Class LearningBoard Creation Instructions:



3. Step-by-step guidelines for creating a shared Class LearningBoard.

Focus: Facilitate refining of Learning Objectives and Learning Goal cards collaboratively.

Purpose: Enhance class engagement and participation in shaping the learning journey.

Team LearningBoard Creation Instructions:



4. Detailed instructions for teams to create their own LearningBoards.

Focus: Guide teams in organizing and flowing Learning Task cards effectively.

Purpose: Encourage team autonomy and efficient task management.
Teacher LearningFLOW Cheat Sheet:

5. Quick-reference guide for teachers, covering key LearningFLOW concepts and check-in strategies.

Purpose: Provide educators with an at-a-glance tool to stay aligned with Agile practices and ensure smooth progress check-ins with teams.

Utilizing the Companion:
Incorporate these deliverables into your teaching practice to foster an environment of agile learning, collaboration, and continuous improvement. The LearningFLOW AI Companion is designed to streamline the educational process, making it more adaptive, engaging, and effective for both teachers and students.` },
                            ...conversationHistory,
                            { role: 'assistant', content: fileContent }
                        ],
                        max_tokens: 1500
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.choices && data.choices.length > 0) {
                    const assistantMessage = data.choices[0].message.content;
                    conversationHistory.push({ role: 'assistant', content: assistantMessage });

                    const formattedMessage = formatOutput(assistantMessage);
                    const outputDiv = document.getElementById('output');
                    outputDiv.innerHTML += `
                        <div class="message user-message"><strong>User:</strong> ${userMessage}</div>
                        <div class="message assistant-message"><strong>LEAF Assistant:</strong> ${formattedMessage}</div>
                        <hr>
                    `;
                    outputDiv.scrollTop = outputDiv.scrollHeight;
                } else {
                    throw new Error('No response from assistant');
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('output').innerText = `Error: ${error.message}`;
            } finally {
                // Hide spinner
                document.getElementById('spinner').style.display = 'none';
            }
        }

        function startConversation() {
            const subject = document.getElementById('subject').value;
            const grade = document.getElementById('grade').value;
            const topics = document.getElementById('topics').value;
            const initialMessage = `Subject: ${subject}\nGrade Level: ${grade}\nTopics: ${topics}`;

            callAssistant(initialMessage);
        }

        function formatOutput(message) {
            const cleanMessage = message.replace(/[#*]/g, ''); // Remove pound signs and asterisks
            const sections = cleanMessage.split('\n').map(line => line.trim()).filter(line => line);
            let formattedMessage = '';

            sections.forEach((section) => {
                if (section.match(/^(Purpose|Wide Open Questions|Learning Outcomes|Value of Learning Outcomes|Learning Activities|Facilitating Questions|Milestone Due Dates|Resources|Student Team Guide|Practical tips|Class LearningBoard Creation Instructions|Team LearningBoard Creation Instructions|Teacher LearningFLOW Cheat Sheet|Utilizing the Companion):/)) {
                    formattedMessage += `<div class="section-title">${section}</div>`;
                } else {
                    formattedMessage += `<div>${section}</div>`;
                }
            });

            return formattedMessage;
        }
    </script>
    <!-- API call code ends here -->
</body>
</html>
